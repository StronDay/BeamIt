networks:
  app_network:
    driver: bridge
  postgres_network:
    driver: bridge
  mongo_network:
    driver: bridge

services:

  postgres:
    image: postgres:16.1
    container_name: postgres_db
    volumes:
      - ./postgres_db:/var/lib/postgresql/data/
    expose:
      - POSTGRES_PORT
    healthcheck:
      # test: ["CMD-SHELL", "export PGPASSWORD=${POSTGRES_PASSWORD} && pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB} ; echo 'Test completed'"]
      test: ["CMD-SHELL", "pg_isready"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 2m
    env_file:
      - .env
    networks:
      - postgres_network

  mongo:
    image: mongo:5.0
    container_name: mongo_db
    volumes:
      - ./mongo_db:/data/db
    ports:
      - ${MONGO_PORT}:${MONGO_PORT}
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
    env_file:
      - .env
    networks:
      - mongo_network

  pgadmin:
    image: dpage/pgadmin4
    container_name: pg_admin
    ports:
      - 5050:60
    volumes:
      - ./pg_admin:/var/lib/pgadmin
    env_file:
      - .env
    networks:
      - postgres_network
    depends_on:
      - postgres

  api:
    container_name: api
    build:
      context: ./services/api
      dockerfile: Dockerfile
    volumes:
      - ./services/api/:/api/
    ports:
      - 5010:5010
    env_file:
      - .env
    networks:
      - app_network

  cipher_service:
    container_name: cipher_service
    build:
      context: ./services/cipher_service
      dockerfile: Dockerfile
    volumes:
      - ./services/cipher_service/:/cipher_service/
    expose:
      - 5002
    env_file:
      - .env
    networks:
      - app_network

  user_service:
    container_name: user_service
    build:
      context: ./services/user_service
      dockerfile: Dockerfile
    volumes:
      - ./services/user_service/:/user_service/
    expose:
      - 5001
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://api:5010/api"]
      interval: 10s
      timeout: 5s
      retries: 5
    env_file:
      - .env
    networks:
      - app_network
      - postgres_network
    depends_on:
      postgres:
        condition: service_healthy
    restart: always

  auth_service:
    container_name: auth_service
    build:
      context: ./services/auth_service
      dockerfile: Dockerfile
    volumes:
      - ./services/auth_service/:/auth_service/
    expose:
      - 5003
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://api:5010/api"]
      interval: 10s
      timeout: 5s
      retries: 5
    env_file:
      - .env
    networks:
      - app_network
      - mongo_network
    depends_on:
      user_service:
        condition: service_healthy
      mongo:
        condition: service_healthy

  test_api:
    container_name: test_api
    build:
      context: ./tests/test_api
      dockerfile: Dockerfile
    volumes:
      - ./tests/test_api/:/test_api/
    expose:
      - 4999
    env_file:
      - .env
    networks:
      - app_network
    restart: "no"
    depends_on:
      postgres:
        condition: service_healthy
      auth_service:
        condition: service_healthy
      user_service:
        condition: service_healthy